using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using MMSalgados.Domain.Interfaces;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MMSalgados.Utils.Service
{
    /// <summary>
    /// Esta classe implementa o upload de arquivos
    /// no Azure Blob Storage
    /// </summary>
    public class BlobStorageServiceAzure : IFileStorage
    {
        private readonly BlobServiceClient _blobServiceClient;
        private const string CONTAINER_NAME = "publicuploads";

        public BlobStorageServiceAzure(BlobServiceClient blobServiceClient)
        {
            _blobServiceClient = blobServiceClient;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Content"></param>
        /// <param name="Name"></param>
        /// <param name="ContentType"></param>
        /// <returns></returns>
        public async Task<string> UploadAsync(Stream Content, string Name, string ContentType)
        {
            if (Content == null)
            {
                return null;
            }

            var containerClient = _blobServiceClient.GetBlobContainerClient(CONTAINER_NAME);

            var blobClient = containerClient.GetBlobClient(GetPathWithFileName(Name));

            await blobClient.UploadAsync(Content, new BlobHttpHeaders { ContentType = ContentType });

            return blobClient.Uri.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Name"></param>
        /// <returns></returns>
        private string GetPathWithFileName(string name)
        {
        string extension = Path.GetExtension(name);
        string shortClientSideFileNameWithoutExt = Path.GetFileNameWithoutExtension(name).Truncate(Path.GetRandomFileName().Length - extension.Length - 5); // Ajustar o limite de acordo com a necessidade
        string uniqueAutoGeneratedFileName = Path.GetRandomFileName().Substring(0, 10) + "_" + Guid.NewGuid().ToString("N"); // Primeiros 10 caracteres e GUID para identificação única

        string basePath = ConfigurationManager.AppSettings["BasePath"] ?? "assets/"; // Buscar caminho base do arquivo de configuração

        return Path.Combine(basePath, uniqueAutoGeneratedFileName + shortClientSideFileNameWithoutExt + extension);
        }

        public static string Truncate(this string value, int maxLength)
        {
        if (value.Length <= maxLength) return value;
        return value.Substring(0, maxLength);
        }

    }
}
